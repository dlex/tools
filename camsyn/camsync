#! /bin/bash

# Usage: camsync [<mountpoint_path>]
# Default mountpoint path is Nikon SD mountpoint
#
# Transfers images from mountpoint subdirectories to the current directory's subfolders
# named by month when picures were taken. The files transerred are renamed using standard
# photo filename pattern. At the same location, subdirectories 'ex' and 'wa' are 
# populated with photos in JPEG format, putting screen-view quality pictures to 'ex'
# and web album quality pictures to 'wa'. UFRaw ID files are placed besides them.

# Constants
c_camera_device="/dev/sda1"
c_destroot="$PWD"


# Determine mountpoint by looking up where sda1 is mounted
if [ $# == 0 ]; then
    cam_mount=`mount | grep $c_camera_device`
    if [ $#cam_mount == 0 ]; then
        echo Camera mount not found
        exit 1
    fi
    mountpoint=`echo "$cam_mount" | perl -n -e "print $+{mntpoint} if / on (?<mntpoint>.+) type /"`
else
    mountpoint="$1"
fi

#echo Sync from \"$mountpoint\"
if [ ! -d "$mountpoint" ]; then
	echo Cannot access mountpoint "$mountpoint"
	exit 1
fi

# Loop through all subdirs supported
for n in "" "100ncd70" "101ncd70" "100nikon" "102ncd70" "103ncd70" "100nd300" "101nd300" "102nd300" "103nd300"
do
	# Special handling of the first (empty) argument enables processing files from root directory
	# This is useful when specifying a local folder to the input
	if [ -z "${n}" ]; then
		sourdir="$mountpoint"
	else
		sourdir="$mountpoint/dcim/${n}/"
	fi
	if [ -d "$sourdir" ]; then
		echo "Sync from \"$sourdir\"";
		pushd "$sourdir" >/dev/null

		# Loop through all types of files supported
		for file in *.nef *.NEF *.tif *.TIF *.jpg *.JPG; do

			# Sort out records that do not relate to actual files, e.g. *.tif or directories
			if [ -f "$file" ]; then

				# Acquire ISO timestamp. To do this, use exiftool parameterlessly (using -DateTimeOriginal
				# truncates milliseconds) to get list of available parameters having this name (usually 2 
				# items are returned). Then sed truncates all excessive info and perl converts the format
				# to more ISO compliant (YYYY-MM-DD HHMMSSss). Then sort is used to bring the longest string
				# (i.e. having most precision in seconds fraction) to the top, and head leaves just one string.
				timestamp=`exiftool "$file" | grep "Date/Time Original" | sed 's/.* ://' | perl -n -e 's/\s*(\d+):(\d+):(\d+)\s+(\d+):(\d+):(\d+).?(\d*)\s*/\1-\2-\3\.\4\5\6\7\n/ and print;' | sort -r | head -n 1`
				if [[ $! ]]; then
					echo Warning: skipping due to errors: $file
					continue
				fi

				# Determine destination dir
				destdir=`echo $timestamp | perl -n -e "/^(?<tsm>\d{4}-\d{2})/ and print $+{tsm};"`
				destdir="$c_destroot/$destdir"
				
				# Determine source file extension and convert it to lower case
				extension=`expr "$file" : '.*\(\..*\)' | tr "[:upper:]" "[:lower:]"`

				#echo "-- $sourdir $file $timestamp $destdir $extension"

				# Ensure destination directory existence
				if [ ! -d "$destdir" ]; then
					mkdir "$destdir"
				fi

				# Check destination file presence, and uniquize destination file name or find identical file
				destfile="$timestamp"
				i=0
				while [ -f "$destdir/$destfile$extension" ]; do
					
					if cmp --quiet "$sourdir$file" "$destdir/$destfile$extension"; then
						break
					fi
					let "i += 1"
					destfile="$timestamp$i"
				done
				# Identical files are not processed
				if [ -f "$destdir/$destfile$extension" ]; then
					echo "-- File $file == $destfile$extension, skipping"
					continue
				fi
				
				# Copy original file
				echo "Copying $file => $destfile$extension..."
				cp --preserve=timestamps "$file" "$destdir/$destfile$extension"
				chmod 0644 "$destdir/$destfile$extension"

				# Postprocessing depends on file type
				if [[ "$extension" == ".nef" ]]; then
					
					# Generic UFRaw settings
					ufraw_generic="--wb=camera --curve=linear --clip=film --wavelet-denoising-threshold=5 --exposure=auto --saturation=1.1"

					# Generate regular preview
					if [ ! -d "$destdir/ex" ]; then
						mkdir "$destdir/ex"
					fi
        			ufraw-batch $ufraw_generic \
                      --out-type=jpeg --compression=95 --create-id=also --overwrite \
                      --out-path="$destdir/ex" "$destdir/$destfile$extension"
							
					# Web preview
					#if [ ! -d "$destdir/ew" ]; then
					#	mkdir "$destdir/ew"
					#fi
        			#ufraw-batch $ufraw_generic \
                    #  --out-type=jpeg --size=800 --compression=94 --create-id=also --overwrite \
                    #  --out-path="$destdir/ew" "$destdir/$destfile$extension"

				elif [[ "$extension" == ".jpg" ]]; then
					echo "WARNING: this is JPEG file, previews are not generated"
				elif [[ "$extension" == ".tif" ]]; then
					echo "WARNING: this is TIFF file, previews are not generated"
				else
					echo "WARNING: unsupported file extension $extension"
				fi
			fi
		done

		popd >/dev/null
	fi
done

